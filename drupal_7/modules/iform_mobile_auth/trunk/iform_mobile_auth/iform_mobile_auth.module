<?php

/**
 * @file
 * Iform Mobile Authentication Module's Core functionality.
 */

require 'phpass/PasswordHash.php';

//Module configuration's URL path
define('CONFIG_PATH', 'admin/config/iform');

/*
 * Implements hook_permission()
 * @return array
 */
function iform_mobile_auth_permission(){
  return array(
    'admin mobile auth' => array(
      'title' => t('View the administrative dashbord'),
      'description' => t('Allows to reach the administrative dashboard and so manage it.')
    ),
    'user mobile auth' => array(
      'title' => t('View personal dashboard'),
      'description' => t('View personal mobile authentication dashboard, to manage personal assigned information.')
    )
  );
}


/*
 * Submit the relevant information to indicia
 */
if(module_exists('iform')) {
  iform_load_helpers(array('data_entry_helper'));
}

/**
 * Generates a list of user fields
 * @return object
 */
function iform_mobile_auth_user_fields(){
  return (object)array(
    'field_indicia_user_id' => (object)array(
      'type' => 'number_integer',
      'title' => 'User ID for this account on the warehouse',
      'name' => 'field_indicia_user_id',
    ),
    'field_first_name' => (object)array(
      'type' => 'text',
      'title' => 'User\'s first name',
      'name' => 'field_first_name',
    ),
    'field_last_name' => (object)array(
      'type' => 'text',
      'title' => 'User\'s last name',
      'name' => 'field_last_name',
      'required' => TRUE
    ),
    'field_iform_auth_shared_secret' => (object)array(
      'type' => 'text',
      'title' => 'User shared secret',
      'name' => 'field_iform_auth_shared_secret',
    ),
    'field_confirmation_code' => (object)array(
      'type' => 'text',
      'title' => 'One-time login code for mobile registered user',
      'name' => 'field_confirmation_code',
    )
  );
}

/**
 * Implementation of hook_menu().
 */
function iform_mobile_auth_menu() {
  $items = array();

  // Mobile registration-based actions
  $items['user/mobile/register'] = array(
    'title'             => 'Accepts a request to register or handles login',
    'type'              => MENU_CALLBACK,
    'page callback'     => 'iform_mobile_auth_user_register',
    'access callback'   => true,
  );
  $items['user/mobile/activate/%/%'] = array(
    'title'             => 'Handle account activation',
    'type'              => MENU_CALLBACK,
    'page callback'     => 'iform_mobile_auth_user_activate',
    'page arguments'    => array(3,4),
    'access callback'   => true,
  );
  // Mobile based record submission
  $items['mobile/submit'] = array(
    'title'             => 'Submit a sample',
    'page callback'     => 'iform_mobile_auth_client_submission',
    'access callback'   => true,
  );
  // Mobile based record submission
  $items['mobile/services'] = array(
    'title'             => 'Submit a sample',
    'page callback'     => 'iform_mobile_auth_services',
    'access callback'   => true,
  );
  // Mobile based report access
  $items['mobile/report'] = array(
    'title'             => 'Access a report',
    'page callback'     => 'iform_mobile_auth_report',
    'access callback'   => true,
  );
  $items['mobile/log'] = array(
    'title'             => 'Accepts an app request to log data.',
    'page callback'     => 'iform_mobile_auth_log_submission',
    'access callback'   => true,
  );
  //User Interface options
  //Dashboard
  $items[CONFIG_PATH . '/mobile'] = array(
    'title' => 'Mobile Authentication',
    'description' =>  'Configure variables relating to the mobile authorisation module',
    'page callback' => 'iform_mobile_auth_dashboard',
    'access arguments' => array('user mobile auth'),
    'file' => 'iform_mobile_auth.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  //Add
  $items[CONFIG_PATH . '/mobile/add'] = array(
    'title' => 'Mobile Authentication',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('iform_mobile_auth_app'),
    'access arguments' => array('user mobile auth'),
    'file' => 'iform_mobile_auth.admin.inc',
    'type' => MENU_CALLBACK,
  );
  //Edit
  $items[CONFIG_PATH . '/mobile/%iform_mobile_auth_app'] = array(
    'title' => 'App settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('iform_mobile_auth_app', 4),
    'access arguments' => array('user mobile auth'),
    'file' => 'iform_mobile_auth.admin.inc',
    'type' => MENU_CALLBACK,
  );
  //Delete
  $items[CONFIG_PATH . '/mobile/delete/%iform_mobile_auth_app'] = array(
    'title' => 'Delete App',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('iform_mobile_auth_delete', 5),
    'access arguments' => array('user mobile auth'),
    'file' => 'iform_mobile_auth.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * This function handles the register/login request from a mobile app.
 * The function either returns a HTTP error status code or the user's secret token
 */
function iform_mobile_auth_user_register() {

  drupal_add_http_header('Content-type', 'text/plain; charset=UTF-8');

  // initalise variables...
  $category = 'Indicia';

  // setup the profile fields
  $shared_secret_field = 'field_iform_auth_shared_secret';
  $firstname_field = 'field_first_name';
  $secondname_field = 'field_last_name';
  $indicia_id_field = 'field_indicia_user_id';
  $confirmation_code_field = 'field_confirmation_code';

  iform_mobile_auth_log('iform_mobile_auth_user_register');
  iform_mobile_auth_log(print_r($_POST,1));

  // pull out parameters from POST request
  $firstname = empty($_POST['firstname']) ? '' : $_POST['firstname'];
  $secondname = empty($_POST['secondname']) ? '' : $_POST['secondname'];
  $email = $_POST['email'];
  $password = $_POST['password'];
  $provided_appsecret = $_POST['appsecret'];
  $provided_appname = $_POST['appname'];

  // Step 1.
  // Check minimum valid parameters
  if (empty($email) || empty($password) || empty($provided_appsecret))
  {
    drupal_add_http_header('Status', '400 Bad Request');
    print 'Bad request';
    iform_mobile_auth_log('Missing parameter');
    return;
  }

  // Step 2.
  // Reject submissions with an incorrect secret (or instances where secret is not set)
  if (!iform_mobile_auth_authorise_app($provided_appname, $provided_appsecret))
  {
    iform_mobile_auth_log("Missing or incorrect shared app secret $provided_appname:$provided_appsecret");
    drupal_add_http_header('Status', '400 Bad Request');
    print 'Bad request';
    return;
  }

  // Step 3.
  // Check email is valid
  if (valid_email_address($email) != 1)
  {
    iform_mobile_auth_log('Invalid email');
    drupal_add_http_header('Status', '400 Bad Request');
    print 'Invalid email';
    return;
  }

  // Step 3.
  // Apply a password strength requirement
  if (iform_mobile_auth_validate_password($password) != 1)
  {
    iform_mobile_auth_log('Password not strong enough');
    drupal_add_http_header('Status', '400 Bad Request');
    print 'Invalid password';
    return;
  }

  // Step 4.
  // Check for an existing user. If found (and password matches) return the secret to all user to 'log in' via app
  $existing_user = user_load_by_mail($email);
  if ($existing_user)
  {
    // Email already exists
    $existing_user_obj = entity_metadata_wrapper('user', $existing_user);
    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
    if (!user_check_password($password, $existing_user))
    {
      drupal_add_http_header('Status', '401 Unauthorized');
      print 'Invalid password';
      iform_mobile_auth_log('Invalid password');
    }
    else
    {
      $secret = $existing_user_obj->$shared_secret_field->value();
      if (empty($secret))
      {
        // create a new user-secret if this user doesn't already have one
        // (they registered directly with the site)
        iform_mobile_auth_log('Creating new shared secret');
        $usersecret = iform_mobile_auth_generate_random_string(10);
        $existing_user_obj->$shared_secret_field->set($usersecret);
        $existing_user_obj->save();
      }

      // check if the user has submitted names (they are creating a new account by accident)
      if (!empty($firstname) || !empty($secondname))
      {
        drupal_add_http_header('Status', '409 Conflict');
        print 'First or second name missmatch';
        iform_mobile_auth_log('First or second name missmatch');
        return;
      }
      else
      {
        $error = '';

        // Check for existing users that do not have indicia id in their profile field
        $indicia_user_id=$existing_user_obj->$indicia_id_field->value();
        if (empty($indicia_user_id) || $indicia_user_id == -1)
        {
          iform_mobile_auth_log('Associating indicia user id');
          // Look up indicia id...
          $indicia_user_id = iform_mobile_auth_get_user_id($existing_user_obj->mail->value(),
            $existing_user_obj->$firstname_field->value(),
            $existing_user_obj->$secondname_field->value(),
            $existing_user_obj->uid->value());


          if (is_int($indicia_user_id)) {
            $existing_user_obj->$indicia_id_field->set($indicia_user_id);
            $existing_user_obj->save();
          }
          else {
            $error = $indicia_user_id;
          }
        }

        // return the user's secret and name to be stored by app
        print $existing_user_obj->$shared_secret_field->value();
        print "\n";
        print $existing_user_obj->$firstname_field->value();
        print "\n";
        print $existing_user_obj->$secondname_field->value();
        print "\n";
        print $error;
        watchdog('debug', 'response done');
      }
    }
    return;
  }

  // Step 5.
  // User is registering for first time. Require first and second name

  if (empty($firstname) || empty($secondname))
  {
    drupal_add_http_header('Status', '400 Bad Request');
    print 'Missing name parameter';
    iform_mobile_auth_log('First or second name empty');
    return;
  }

  // Step 6.
  // Create account for user

  // generate the user's shared secret returned to the app
  $usersecret = iform_mobile_auth_generate_random_string(10);

  // generate the user confirmation code returned via email
  $confirmation_code = iform_mobile_auth_generate_random_string(20);

  $roles = user_roles(true);
  $user_details = array('pass' => $password, /* handles the (unsalted) hash process */
    'name' => $email,
    'mail' => $email);

  $new_user = user_save(NULL,$user_details);
  $new_user_obj = entity_metadata_wrapper('user', $new_user);

  // Step 7.
  // Associate indicia_id with user account

  // Look up indicia id...
  $indicia_user_id = iform_mobile_auth_get_user_id($email, $firstname, $secondname, $new_user->uid);

  $error = '';
  // handle iform_mobile_auth_get_user_id returning an error
  if (!is_int($indicia_user_id))
  {
    $indicia_user_id = -1;
    $error = $indicia_user_id;
  }

  // update the userid
  $new_user->roles[2] = $roles[2]; // authenticated user role
  $new_user = user_save($new_user);

  // save all the user fields

  $new_user_obj->$firstname_field->set($firstname);
  $new_user_obj->$secondname_field->set($secondname);
  $new_user_obj->$indicia_id_field->set($indicia_user_id);
  $new_user_obj->$shared_secret_field->set($usersecret);
  $new_user_obj->$confirmation_code_field->set($confirmation_code);
  $new_user_obj->save();

  // Step 8.
  // Send activation mail
  global $base_url;
  $activation_url = $base_url . '/user/mobile/activate/' . $new_user->uid . '/' . $confirmation_code;

  $from = variable_get('site_mail', ini_get('sendmail_from'));
  $subject = variable_get('iform_mobile_auth_registration_subject', "Welcome to !site");
  $body = variable_get('iform_mobile_auth_registration_body', "Activate your account by clicking on the following link:<br/>!activation_url");

  $headers = array(
    'MIME-Version' => '1.0',
    'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
    'Content-Transfer-Encoding' => '8Bit',
    'X-Mailer' => 'Drupal',
    'From' => $from,
  );

  $message = array(
    'to' => $email,
    'subject' => t($subject,array("!site" => variable_get('site_name', "Indicia"))),
    'body' => t($body, array("!activation_url" => $activation_url)),
    'headers' => $headers,
  );

  drupal_mail_send($message);

  // return the user's secret and name to be stored by app
  print $new_user_obj->$shared_secret_field->value();
  print "\n";
  print $new_user_obj->$firstname_field->value();
  print "\n";
  print $new_user_obj->$secondname_field->value();
  print "\n";
  print $error;
}


/**
 * Handles the request for account activation
 * @param $uid
 * @param $code
 */
function iform_mobile_auth_user_activate($uid, $code)
{
  drupal_add_http_header('Content-type', 'text/plain; charset=UTF-8');

  $user = user_load(intval($uid));
  $user_obj = entity_metadata_wrapper('user', $user);
  $key = 'profile_confirmation_code';
  $category = iform_mobile_auth_profile_fields()->$key->category;
  if ($user->$key == $code)
  {
    iform_mobile_auth_log("Activating user ".$uid." with code ".$code."");

    $user_obj->$key->set(NULL);
    $user_obj->save();
    user_save($user,array('status' => 1));

    $path = variable_get('iform_mobile_auth_registration_redirect', "<front>");

    // redirect to page of admin's choosing
    drupal_goto($path);
  }
  else
  {
    $path = variable_get('iform_mobile_auth_registration_redirect_unsuccessful', "<front>");

    // redirect to page of admin's choosing
    drupal_goto($path);
  }
}


/**
 * Handles record submissions from mobile apps
 */
function iform_mobile_auth_client_submission() {

  drupal_add_http_header('Content-type', 'text/plain; charset=UTF-8');

  iform_mobile_auth_log('iform_mobile_auth_client_submission');
  iform_mobile_auth_log('POST REQUEST');
  iform_mobile_auth_log(print_r($_POST,1));

  // Steps 1 to 4 are covered in the request authorisation
  if (!$existing_user = iform_mobile_auth_authorise_request())
    return;

  $safe_website_id = intval($_POST['website_id']);
  if ($safe_website_id == 0 || 
          $safe_website_id != variable_get('indicia_website_id', '')) {
    drupal_add_http_header('Status', '400 Bad Request');
    print 'Bad request';
    iform_mobile_auth_log('Missing or incorrect website_id');
    return;  
  }
  $safe_survey_id = intval($_POST['survey_id']);
  if ($safe_survey_id == 0) {
    drupal_add_http_header('Status', '400 Bad Request');
    print 'Bad request';
    iform_mobile_auth_log('Missing or incorrect survey_id');
    return;    
  }

  // Step 5.
  // Replace user parameters in submission
  foreach ($_POST as $key => $value)
  {
    if ($value == '[userid]') $_POST[$key] = $existing_user->uid;
    if ($value == '[username]') $_POST[$key] = $existing_user->name;
    if ($value == '[email]') $_POST[$key] = $existing_user->mail;
    if ($value == '[firstname]') $_POST[$key] = $existing_user->$firstname_field;
    if ($value == '[surname]') $_POST[$key] = $existing_user->$secondname_field;
  }

  // Step 6.
  // Proceed to process the submission...

  // get connection/indicia website details
  $connection = iform_get_connection_details(NULL);

  $postargs = array();
  $postargs['website_id'] = $safe_website_id;

  // obtain nonce
  $curl_check = data_entry_helper::http_post(helper_config::$base_url.'index.php/services/security/get_nonce', $postargs, false);

  if (isset($curl_check['result'])) {

    if (isset($_FILES['photo1'])) {
      // rename attached file to be picked up correctly
      $_FILES['occurrence:image:1'] = $_FILES['photo1'];

      // mobile generated files can have file name in format resize.jpg?1333102276814
      // which will fail the warehouse submission process
      if (strstr($_FILES['occurrence:image:1']['type'],'jpg') !== FALSE ||
        strstr($_FILES['occurrence:image:1']['type'],'jpeg') !== FALSE)
      {
        $_FILES['occurrence:image:1']['name'] = uniqid().'.jpg';
      }
      if (strstr($_FILES['occurrence:image:1']['type'],'png') !== FALSE)
      {
        $_FILES['occurrence:image:1']['name'] = uniqid().'.png';
      }
      unset($_FILES['photo1']);
      iform_mobile_auth_log(print_r($_FILES,1));
    }

    $nonce =  $curl_check['output'];

    // construct post parameter array
    $params = array();

    // general info
    $params['website_id'] = $safe_website_id;
    $params['survey_id'] = $safe_survey_id;
    $params['auth_token'] = sha1($nonce.":".$connection['password']);
    $params['nonce'] = $nonce;

    // Obtain coordinates of location if a name is specified
    $georeftype = iform_mobile_auth_escape($_POST['sample:entered_sref_system']);

    $ref = trim(iform_mobile_auth_escape($_POST['sample:entered_sref']));

    unset($_POST['sample:entered_sref_system']);
    unset($_POST['sample:entered_sref']);

    if ($georeftype == 'text')
    {
      // geocode the submitted location
      $baseGoogle = "http://maps.googleapis.com/maps/api/geocode/json?region=uk&sensor=false&address=";
      $url = $baseGoogle . urlencode($ref);

      $session = curl_init();
      curl_setopt($session, CURLOPT_URL, $url);
      curl_setopt($session, CURLOPT_HEADER, false);
      curl_setopt($session, CURLOPT_RETURNTRANSFER, true);

      // Do the POST
      $response = curl_exec($session);

      iform_mobile_auth_log($response);

      // close cURL resource
      curl_close($session);

      $loc = json_decode($response);

      $loc = $loc->results[0]->geometry->location;
      if(isset($loc)) $ref = $loc->lat.",".$loc->lng;
      else $ref = "0,0"; // default location if unable to geocode

      $georeftype = 4326;
    }

    // enter sample info
    $params['sample:entered_sref'] = $ref;
    $params['sample:entered_sref_system'] = $georeftype;
    $params['sample:geom'] = '';
    $params['gridmode'] = 'true';

    // enter occurrence info
    $params['occurrence:present'] = 'on';
    $params['occurrence:record_status'] = 'C';

    $isOccurrencesList = FALSE;
    // add all supplied data
    foreach ($_POST as $key => $value)
    {
      if (strstr($key,'smpAttr:') != FALSE)
      {
        $params[$key] = iform_mobile_auth_escape($value);
      }
      elseif (strstr($key,'occAttr:') != FALSE)
      {
        $params[$key] = iform_mobile_auth_escape($value);
      }
      elseif (strstr($key,'sample:') != FALSE)
      {
        $params[$key] = iform_mobile_auth_escape($value);
      }
      elseif (strstr($key,'occurrence:') != FALSE)
      {
        $params[$key] = iform_mobile_auth_escape($value);
      }
      elseif (strstr($key,'sc:') != FALSE)
      {
        // sc: params indicate a list submission
        $isOccurrencesList = TRUE;
        $params[$key] = iform_mobile_auth_escape($value);
      }
    }

    if ($isOccurrencesList)
    {
      $submission = data_entry_helper::build_sample_occurrences_list_submission($params);
    }
    else
    {
      $submission = data_entry_helper::build_sample_occurrence_submission($params);
    }

    iform_mobile_auth_log('Sending the following fields:');
    foreach ($params as $key => $value)
    {
      iform_mobile_auth_log($key . '=>' . $value);
    }

    $writeTokens = array();
    $writeTokens['auth_token'] = sha1($nonce.":".$connection['password']);
    $writeTokens['nonce'] = $nonce;

    // send record to indicia
    $output = data_entry_helper::forward_post_to('sample', $submission, $writeTokens);

    if (isset($output['error']))
    {
      // something went wrong
      drupal_add_http_header('Status', '502 Bad Gateway');
      print "The server reported the following error:<br/>";
      print $output['error'] . "<br/>";
      foreach($output['errors'] as $error) {
        print "$error<br/>";
      }
    }

    iform_mobile_auth_log(print_r($output,1));
  }
  else
  {
    // something went wrong in obtaining nonce
    drupal_add_http_header('Status', '502 Bad Gateway');
    print_r($curl_check);
    iform_mobile_auth_log($curl_check);
  }
}

/**
 * Menu function to retrieve the results of a report which responds to the mobile/report
 * web service endpoint.
 *
 * Parameters can be provided as GET or POST data, since POST is required when supporting long parameter values for
 * geometry filters. Requires the following query parameters:
 * * report - the path to the report file to run on the warehouse, e.g. 'library/totals/filterable_species_occurrence_image_counts.xml'
 * * email - the logged in user's email, used for authentication
 * * usersecret - the user secret key, used for authentication
 * * appsecret - the shared app secret key, used for authentication.
 * * caching - optional setting to define the caching mode which defaults to false (no caching).
 *   Set to global for a single global cache entry (which cannot be used for user-specific reports)
 *   or set to perUser to cache the report on a per user basis.
 * * cacheTimeout - number of seconds before which the cache cannot expire. After this, there is a random
 *   chance of expiry on each hit. Defaults to 3600.
 * Additionally, provide a query parameter for each report parameter value, orderby, sortdir, limit or offset you wish to pass
 * to the report.
 * Prints out a JSON string for the report response.
 *
 */
function iform_mobile_auth_report() {
  //drupal_set_header('Content-Type: application/json; charset=UTF-8');
  // Don't use $_REQUEST as it escapes values in strange way
  $request = $_POST + $_GET;
  iform_mobile_auth_log('iform_mobile_auth_report');
  iform_mobile_auth_log('REQUEST');
  iform_mobile_auth_log(print_r($request,1));
  if (empty($request['report'])) {
    print 'Bad request';
    iform_mobile_auth_log('Missing report parameter');
    return;
  }

  if (!$existing_user = iform_mobile_auth_authorise_request())
    return;
  $connection = iform_get_connection_details(NULL);
  $auth = data_entry_helper::get_read_auth($connection['website_id'], $connection['password']);
  $url = helper_config::$base_url.'index.php/services/report/requestReport';
  $caching = !empty($request['caching']) ? $request['caching'] : 'false';
  $cacheTimeout = !empty($request['cacheTimeout']) ? $request['cacheTimeout'] : 3600;
  unset($request['appsecret']);
  unset($request['usersecret']);
  unset($request['email']);
  unset($request['cacheTimeout']);
  $defaults = array(
    'reportSource' => 'local'
  );
  if ($caching==='false' || $request['caching']==='perUser')
    $request['user_id'] = $existing_user->profile_indicia_user_id;
  $request = array_merge($defaults, $auth, $request);
  $cacheLoaded = false;
  if ($caching!=='false') {
    $response = data_entry_helper::cache_get($request, $cacheTimeout);
    if ($response!==false) {
      $response = json_decode($response, true);
      $cacheLoaded = true;
      print "cache read $cacheTimeout<br/>";
    }
  }
  if (!isset($response) || $response===false) {
    $response = data_entry_helper::http_post($url . '?' . data_entry_helper::array_to_query_string($request));
  }
  if (isset($response['output'])) {
    print ($response['output']);
    if ($caching!=='false' && !$cacheLoaded ) {
      data_entry_helper::cache_set($request, json_encode($response), $cacheTimeout);
      print ' Stored in cache.<br/> ';
    }
  }
  else {
    print 'Bad request';
    iform_mobile_auth_log('Report returned '.print_r($response, true));
  }
  return;
}

/**
 *
 */
function iform_mobile_auth_services(){
  drupal_add_http_header('Content-type', 'application/json; charset=UTF-8');

  $request = $_POST + $_GET;
  iform_mobile_auth_log('iform_mobile_auth_report');
  iform_mobile_auth_log('REQUEST');
  iform_mobile_auth_log(print_r($request,1));

  //authenticate
  if (!$existing_user = iform_mobile_auth_authorise_request())
    return;

  //verify request
  if (empty($request['table'])) {
    print 'Bad request';
    iform_mobile_auth_log('Missing service warehouse table.');
    return;
  }

  //prepare request for warehouse query
  $table = $request['table'];
  $columns = $request['columns'];
  unset($request['table']);
  unset($request['columns']);

  unset($request['appname']);
  unset($request['appsecret']);

  $connection = iform_get_connection_details(NULL);
  $auth = data_entry_helper::get_read_auth($connection['website_id'], $connection['password']);

  $response = data_entry_helper::get_population_data(array(
    'table' => $table,
    'columns' => $columns,
    'extraParams' => $auth + $request,
    'nocache' => true // forces a load from the db rather than local cache
  ));

  print json_encode($response);
}


/**
 * Authorise a request to either submit or read records from an app.
 *
 * Uses the posted usersecret, appsecret and email to check that the app is authorised and
 * that the user is valid and activated.
 * @return object Drupal user object, or FALSE if not authorised.
 */
function iform_mobile_auth_authorise_request() {
  // pull out expected parameters from POST request
  $usersecret = $_POST['usersecret'];
  $provided_appsecret = $_POST['appsecret'];
  $provided_appname = $_POST['appname'];
  $email = $_POST['email'];

  // Step 1
  // Verify APP shared secret
  if (!iform_mobile_auth_authorise_app($provided_appname, $provided_appsecret))
  {
    drupal_add_http_header('Status', '400 Bad Request');
    print 'Bad request';
    iform_mobile_auth_log('Missing or incorrect shared app secret');
    return FALSE;
  }

  // Step 2.
  // Locate corresponding user
  // @todo This area of code needs more work on D6->D7 conversion
  if (isset($GLOBALS['user']) && $GLOBALS['user']->uid > 0) {
    // User is already authenticated
    $existing_user = $GLOBALS['user'];
    iform_mobile_auth_log('Authenticated user: '.print_r($existing_user,1));
    // Skip to step 5
  }
  else {
    $existing_user = user_load(array('mail' => $email));

    if (empty($email) || $existing_user == FALSE)
    {
      if (empty($email)) $email = "app@mobile.net";
      iform_mobile_auth_log('No corresponding user found with email');
      $existing_user = (object)array("uid" => 0,
        profile_indicia_user_id => "1",
        "name" => $email,
        "mail" => $email,
        'profile_first_name' => "Anonymous",
        'profile_last_name' => "Anonymous");
    }
    else
    {
      // load profile fields
      profile_load_profile($existing_user);
      // Step 3.
      // Verify USER shared secret...
      if (empty($usersecret) || $usersecret != $existing_user->profile_indicia_mobile_auth_shared_secret)
      {
        drupal_add_http_header('Status', '400 Bad Request');
        print 'Bad request';
        iform_mobile_auth_log('User secret incorrect');
        return FALSE;
      }
      // Step 4.
      // Check user activation status
      if ($existing_user->status != 1)
      {
        iform_mobile_auth_log('User not activated');
        drupal_add_http_header('Status', '407 Proxy Authentication Required');
        print 'User not activated';
        return FALSE;
      }
    }
  }
  // assign this user to gobal user var so that it can be added to the indicia submission
  iform_mobile_auth_log(print_r($existing_user,1));
  $GLOBALS['user'] = $existing_user;
  return $existing_user;
}


##########################
#### HELPER FUNCTIONS ####
##########################

/**
 * Checks if the user is allowed to see a saved app account.
 * @param null $app
 * @return bool
 */
function user_has_permission($app = NULL){
  global $user;
  return user_access('admin mobile auth') || (!is_null($app) && $app['created_by'] === $user->uid);
}

/**
 * Implements hook_load() to load the apps from the database.
 * @param null $id
 * @return array
 */
function iform_mobile_auth_app_load($id = NULL) {
  if ($id){
    //get specific app account
    $results = db_query("SELECT * FROM {iform_mobile_auth}
      WHERE id = :id ORDER BY title", array(':id' => $id));
  } else{
    //all accounts
    $results = db_query("SELECT * FROM {iform_mobile_auth} ORDER BY title");
  }

  //transform an array of apps
  $apps = array();
  foreach ($results as $app){
    $apps[] = (array) $app;
  }

  return $apps;
}


/**
 * The core function that checks if the sent mobile application password and name
 * matches any in the database.
 *
 * If no $name was provided then the account is assumed to be anonymous.
 *
 * This function iterates through the list of app accounts from database table
 * with the matching name. This means it is allowed for one appname to have more than one
 * appsecret, and if any of the secrets match the provided secret than the authorisation is given.
 */
function iform_mobile_auth_authorise_app($name, $secret)
{
  if (empty($secret)){
    return FALSE;
  }

  //case for anonymous user
  $name = empty($name) ? 'anonymous' : $name;

  $result = db_query("SELECT * FROM {iform_mobile_auth} WHERE name = :name",
    array(':name' => $name));
  foreach($result as $app) {
    $current_secret = $app->secret;
    if (verify_hash($secret, $current_secret)){
      return TRUE;
      break;
    }
  }

  return FALSE;
}

/*
 * Generates a hashed secret.
 * Uses PHPASS library for pre PHP 5.3
 * @param $secret
 * @return string
 */
function generate_hash($secret) {
  $t_hasher = new PasswordHash(8, FALSE);
  $hashed_secret = $t_hasher->HashPassword($secret);
  unset($t_hasher);
  return $hashed_secret;
}

/*
 * Verifies a hashed password.
 * Uses PHPASS library for pre PHP 5.3
 */
function verify_hash($secret, $hashed_secret) {
  $t_hasher = new PasswordHash(8, FALSE);
  $check = $t_hasher->CheckPassword($secret, $hashed_secret);
  unset($t_hasher);
  return $check;
}

/**
 * A function to escape user input.
 * Currently simply a wrapper around drupal's check_plain function.
 */
function iform_mobile_auth_escape($value)
{
  if (is_array($value)) {
    $escaped_array = array();
    foreach($value as $key => $nested_value){
      $escaped_array[$key] = iform_mobile_auth_escape($nested_value);
    }
    return $escaped_array;
  }
  else {
    return check_plain($value);
  }
}


/**
 * A simple utility method to generate a random string of specific length.
 * @param int $length
 * @return string
 */
function iform_mobile_auth_generate_random_string($length = 10)
{
  return substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, $length);
}


/**
 * This calls the index.php/services/user_identifier/get_user_id service to return an indicia id which
 * can be associated with the user account.
 * @param $email
 * @param $firstname
 * @param $secondname
 * @param $cms_id
 * @return int
 */
function iform_mobile_auth_get_user_id($email, $firstname, $secondname, $cms_id)
{
  // get connection/indicia website details
  $connection = iform_get_connection_details(NULL);

  $postargs = array();
  $postargs['website_id'] = $connection['website_id'];

  // obtain nonce
  $curl_check = data_entry_helper::http_post(helper_config::$base_url.'index.php/services/security/get_nonce', $postargs);

  if ($curl_check['result']) {
    $nonce =  $curl_check['output'];

    $postargs = array();
    $postargs['identifiers'] = '[{"type":"email","identifier":"'.$email.'"}]';
    $postargs['auth_token'] = sha1($nonce.":".$connection['password']);
    $postargs['surname'] = $secondname;
    $postargs['first_name'] = $firstname;
    $postargs['cms_user_id'] = $cms_id;
    $postargs['force'] = 'split';
    $postargs['nonce'] = $nonce;

    iform_mobile_auth_log(print_r($postargs,1));

    // request the user id
    $get_id_results = data_entry_helper::http_post(helper_config::$base_url.'index.php/services/user_identifier/get_user_id', $postargs, false);
    iform_mobile_auth_log(print_r($get_id_results,1));

    $result = json_decode($get_id_results['output']);
    if (!isset($result->error))
    {
      return intval($result->userId);
    }
    else
    {
      iform_mobile_auth_log('Error in iform_mobile_auth_get_user_id:'.$result->error);
      return $result->error;
    }
  }
  else
  {
    iform_mobile_auth_log('iform_mobile_auth_get_user_id:Unable to retreive nonce');
  }

  return -1;
}


/**
 * Returns TRUE if the supplied password is acceptable.
 * Simple at the moment but could contain additional checks (alpha-numerics, special chars etc)
 * @param $pass
 * @return bool
 */
function iform_mobile_auth_validate_password($pass)
{
  return strlen($pass) >= 0;
}


/**
 * Returns TRUE if the module is in debug mode
 * @return bool
 */
function iform_mobile_auth_debug_mode()
{
  if (empty($_POST['appname'])){
    return FALSE;
  }

  $name = $_POST['appname'];

  $result = db_query("SELECT * FROM {iform_mobile_auth} WHERE name = :name",
    array(':name' => $name));

  foreach($result as $app) {
    if ($app->debug == 1){
      return TRUE;
      break;
    }
  }

  return FALSE;
}


/**
 * Logs app send data.
 * todo: add user authentication option, so that messages have user id.
 *
 */
function iform_mobile_auth_log_submission(){
  $appname = $_POST['appname'];
  $appsecret = $_POST['appsecret'];

  if(iform_mobile_auth_authorise_app($appname, $appsecret)){
    $message = $_POST['message'];
    $url = $_POST['url'];

    if (empty($message)){
      drupal_add_http_header('Status', '400 Bad Request');
      print 'Bad request';
    }

    iform_mobile_auth_log($message, NULL, WATCHDOG_ALERT, $url);
  } else {
    drupal_add_http_header('Status', '400 Bad Request');
    print 'Bad request';
  }
}

/**
 * @param $message
 */
function iform_mobile_auth_log($message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL)
{
  // obtain debug mode indicator
  $debug = iform_mobile_auth_debug_mode();
  if ($debug)
  {
    error_log($message);
    watchdog("iform_mobile_auth", $message, $variables, $severity, $link);
  }
}

/**
 * Implement hook_user_view.
 * Hide's system fields when not an admin.
 * @param $account
 * @param $view_mode
 * @param $langcode
 */
function iform_mobile_auth_user_view($account, $view_mode, $langcode) {
  if (!user_access('admin mobile auth')) {
    unset($account->content['field_iform_auth_shared_secret']);
    unset($account->content['field_confirmation_code']);
  }
}

/**
 * Implement hook_form_alter.
 * Hide's system fields from forms when not an admin.
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function iform_mobile_auth_form_alter(&$form, &$form_state, $form_id) {
  if (($form_id === 'user_profile_form' || $form_id === 'user_register')) {
    if (!user_access('admin mobile auth'))
      unset($form['field_iform_auth_shared_secret']);
    unset($form['field_confirmation_code']);
  }
}
